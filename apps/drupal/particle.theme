<?php

/**
 * @file
 * Functions to support theming in the Particle theme.
 */

use Drupal\Core\Form\FormStateInterface;

/**
 * Implements hook_preprocess_HOOK().
 */
function particle_preprocess_page(&$variables) {
  $moduleHandler = \Drupal::service('module_handler');
  if ($moduleHandler->moduleExists('components')){
    $variables['has_components_module'] = TRUE;
  }
}

/**
 * Implements hook_theme_suggestions_HOOK_alter().
 */
function particle_theme_suggestions_block_alter(array &$suggestions, array $variables) {
  // Provide suggestion for block templates by custom block type.
  if (!empty($variables['elements']['content']['#block_content'])) {
    $block = $variables['elements']['content']['#block_content'];
    // Add `block--BLOCK-TYPE.html.twig`
    $suggestions[] = 'block__' . $block->bundle();
    $view_mode = $variables['elements']['#configuration']['view_mode'];
    if (!empty($view_mode)) {
      // Add `block--BLOCK-TYPE--VIEW-MODE.html.twig`
      $suggestions[] = 'block__' . $block->bundle() . '__' . $view_mode;
    }
  }
}

/**
 * Implements hook_theme_suggestions_HOOK_alter().
 */
function particle_theme_suggestions_image_alter(array &$suggestions, array $variables) {
  $node = \Drupal::request()->attributes->get('node');
  if (!empty($node)) {
    $suggestions[] = 'image__' . $node->getType();
  }
}

/**
 * Implements hook_preprocess_block().
 */
function particle_preprocess_block__system_branding_block(&$variables) {
  $logo_default = theme_get_setting('logo.use_default');
  $logo_url = theme_get_setting('logo.url');

  // Set the logo to PL if default.
  if ($logo_default) {
    $variables['logo_svg_inline'] = '@atoms/image/logo.svg';
    // Send to img if Logo is not an default.
  } else {
    $variables['logo_img_src'] = $logo_url;
  }
}

/**
 * Implements hook_preprocess_breadcrumb().
 */
function particle_preprocess_breadcrumb(&$variables) {
  if (($node = \Drupal::routeMatch()->getParameter('node')) && $variables['breadcrumb']) {
    $variables['breadcrumb'][] = [
      'text' => $node->getTitle()
    ];
  }
}

/**
 * Implements hook_preprocess_user().
 */
function particle_preprocess_user(&$variables) {
  $variables['content']['member_for']['#markup'] = '';
}

/**
 * Implements hook_theme_suggestions_HOOK_alter().
 */
function particle_theme_suggestions_form_alter(array &$suggestions, array $variables) {
  $id = $variables['element']['#id'];
  // Particle Theme for Octane's Views Search and Drupal's Built-In Search.
  // This hook allows to apply two search block implementations to the same theme file.
  // Drupal only template file located at /particle/apps/drupal/templates/form/form--particle-search.html.twig.
  if ($id == 'views-exposed-form-search-page' || $id == 'search-block-form') {
    $suggestions[] = 'form__particle_search';
  }
}

/**
 * Implements hook_form_alter().
 */
function particle_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  $id = $form['#id'];
  // Switch method to allow additional cases for these forms.
  // We are handling two cases for search block config from Octane and Drupal.
  // This switch syncs the two radically different render arrays.
  switch($id) {
    case 'views-exposed-form-search-page':
      // Clean the unwanted label.
      unset($form['#info']['filter-search_api_fulltext']['label']);
      // The Search block from Views doesn't match Drupal's built-in form.
      // We are syncing them here to make sure they behave the same.
      // $form['keywords'] is the renderable array for Views Search input field.
      // Update Views Search input to Search type to avoid offset from input button.
      $form['keywords']['#type'] = 'search';
      // Update the size of the search field to match Drupal's built-in Search.
      $form['keywords']['#size'] = 15;
      // Add the title to Views Search for screen readers.
      $form['keywords']['#title'] = t('Enter the terms you wish to search for.');
      // Set the title to invisible, which applies visually-hidden class for screen reader.
      $form['keywords']['#title_display'] = 'invisible';
      // Add the Bootstrap class needed for input fields.
      $form['keywords']['#attributes']['class'] = ['form-control'];
      // Add the Bootstrap class to our Input button.
      $form['actions']['submit']['#attributes']['class'] = ['btn', 'btn-outline-success'];
      break;
    case 'search-block-form':
      // For Drupal's built-in Search, add classes.
      // $form['keys'] is the renderable array for Drupal's built-in Search input field.
      // Add the Bootstrap class needed for input fields.
      $form['keys']['#attributes']['class'] = ['form-control'];
      // Add the Bootstrap class to our Input button.
      $form['actions']['submit']['#attributes']['class'] = ['btn', 'btn-outline-success'];
  }
}
