@include add-grid(12);
@include add-gutter(0);

////
/// @group layout
////

// % should not be used here as Firefox doesn't like it
$grid-gutter: $spacing--m;
///
$grid-columns: 12;
$grid-sizes: 1, 2, 3, 4, 6;

/// Get width of grid item
/// `calc()` is returned b/c you can use `px` gutters and `%` width.
/// @param {number} $columns - How many columns from `$grid-columns` (i.e. 12) to get width for. Passing in 4 when 12 column would get you roughly 25% after accounting for gutters.
/// @returns {number} - a `calc()` value to use in `width`
/// @example scss
///   .class {
///     width: grid-width(4); // becomes `width: calc((50% + 1%) - 2%);`
///   }
@function grid-width($columns) {
  $items: $grid-columns / $columns;
  $column: 100% / $items;
  $extra-space: $grid-gutter / $items;
  @return calc((#{$column} + #{$extra-space}) - #{$grid-gutter});
}

/// Smart Grid
/// Include in a parent element to layout all children
/// @param {number} $row-items [4] - How many items per row
/// @param {number} $gutter [1rem] - Space between Items
@mixin smart-grid($row-items: 4, $gutter: $grid-gutter) {
  display: flex;
  flex-wrap: wrap;
  > * {
    margin-bottom: $gutter;
    @if $row-items > 1 {
      width: grid-width($grid-columns / $row-items);
    } @else {
      width: 100%;
    }
    &:last-child {
      margin-bottom: $gutter;
    }
    &:nth-child(1n) {
      margin-right: $gutter;
    }
    &:nth-child(#{$row-items}n) {
      margin-right: 0;
    }
  }
}

.u-grid-width {
  @each $i in $grid-sizes {
    &--#{$i} {
      width: grid-width($i) !important; // stylelint-disable-line declaration-no-important
    }
  }
}

.grid-demo {
  counter-reset: grid-item;
  > * {
    counter-increment: grid-item;
    &:after {
      content: counter(grid-item);
      margin-left: 3px;
    }
    &:nth-child(odd) {
      border: dashed 1px red;
    }
    &:nth-child(even) {
      border: dashed 1px orange;
    }
  }
}

.full-grid-demo {
  @include smart-grid($grid-columns);
  background: $c-gray--lightest;
  &__item {
    background: $c-gray;
    border: solid 1px $c-gray--lighter;
    height: 200px;
  }
}

.smart-grid {
  > * {
    margin-bottom: $spacing--m;
    &:last-child {
      margin-bottom: $spacing--m;
    }
    &[class]:last-child {
      margin-bottom: $spacing--m;
    }
  }
  @each $size in $grid-sizes {
    @include breakpoint($bp--xsmall) {
      &[data-row-items-xsmall="#{$size}"] {
        @include smart-grid($row-items: $size);
      }
    }
  }
  @each $size in $grid-sizes {
    @include breakpoint($bp--small) {
      &[data-row-items-small="#{$size}"] {
        @include smart-grid($row-items: $size);
      }
    }
  }
  @each $size in $grid-sizes {
    @include breakpoint($bp--medium) {
      &[data-row-items-medium="#{$size}"] {
        @include smart-grid($row-items: $size);
      }
    }
  }
  @each $size in $grid-sizes {
    @include breakpoint($bp--large) {
      &[data-row-items-large="#{$size}"] {
        @include smart-grid($row-items: $size);
      }
    }
  }
  @each $size in $grid-sizes {
    @include breakpoint($bp--xlarge) {
      &[data-row-items-xlarge="#{$size}"] {
        @include smart-grid($row-items: $size);
      }
    }
  }
}

///
.u-row {
  display: flex;
  justify-content: space-between;
  align-items: center;
}

.grid--2-1 {
  @include breakpoint($bp--medium) {
    display: flex;
    justify-content: space-between;
  }
  > * {
    @include breakpoint($bp--medium) {
      &:nth-child(odd) {
        width: calc(66.66% - (#{$grid-gutter} / 2));
      }
      &:nth-child(even) {
        width: calc(33.33% - (#{$grid-gutter} / 2));
      }
    }
  }
}
