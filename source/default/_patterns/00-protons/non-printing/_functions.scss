// Custom functions

/**
 * Does the main work of converting to a standardized unit by stripping a number
 * and multiplying by the rem value.
 */
@function convert-to-rem($value, $base-value)  {
  @if ($value != auto) { $value: strip-unit($value) / strip-unit($base-value) * 1rem }
  @if ($value == 0rem) { $value: 0; } // Turn 0rem into 0
  @return $value;
}

/**
 * A "use everywhere" function that converts any standard CSS measurement to rem.
 *
 * Call with 1, 2, 3 or 4 parameters. 'px' is not required but supported
 * @example rem-calc(10 20 30px 40);
 * Numbers are space delimited. If you want to delimit using commas, wrap it in another pair of parens.
 * @example rem-calc((10, 20, 30, 40px));
 */
@function rem-calc($values, $base-value: 16px) {
  $max: length($values);

  @if $max == 1 { @return convert-to-rem(nth($values, 1), $base-value); }

  $remValues: ();
  @for $i from 1 through $max {
    $remValues: append($remValues, convert-to-rem(nth($values, $i), $base-value));
  }
  @return $remValues;
}
